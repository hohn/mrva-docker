* Using the Containers
** Running the containers
   1. Start the containers
     #+BEGIN_SRC sh 
       cd ~/work-gh/mrva/mrva-docker/
       docker-compose -f docker-compose-demo.yml down
       docker ps
       docker-compose -f docker-compose-demo.yml up 
     #+END_SRC
   2. View all logs
      : docker-compose logs
   3. Follow all logs if started with =-d=
      #+BEGIN_SRC sh 
        docker-compose logs -f
      #+END_SRC

   4. Follow single container, =server=, logging via
      #+BEGIN_SRC sh 
        cd ~/work-gh/mrva/mrvacommander
        docker-compose up -d
        docker-compose logs -f server
      #+END_SRC
   5. Cleanup in case of obscure errors (network or other)
      #+BEGIN_SRC sh 
        docker-compose -f docker-compose-demo.yml down --volumes --remove-orphans
        docker network prune
        docker-compose -f docker-compose-demo.yml up --build
      #+END_SRC

** Use gh-mrva container to send request via cli
     #+BEGIN_SRC sh 
       #*  Start container and check gh-mrva tool
       # Start an interactive bash shell inside the running Docker container
       docker exec -it mrva-docker-client-ghmrva-1 bash

       # Check if the gh-mrva tool is installed and accessible
       gh-mrva -h

       #*  Set up gh-mrva configuration
       # Create configuration directory and generate config file for gh-mrva
       mkdir -p ~/.config/gh-mrva
       cat > ~/.config/gh-mrva/config.yml <<eof
       # Configuration file for the gh-mrva tool
       # codeql_path: Path to the CodeQL distribution (not used in this setup)
       # controller: Placeholder for a controller NWO (not relevant in this setup)
       # list_file: Path to the repository selection JSON file

       codeql_path: not-used/codeql-path
       controller: not-used/mirva-controller
       list_file: $HOME/work-gh/mrva/gh-mrva/gh-mrva-selection.json
       eof

       #*  Create repository selection list
       # Create a directory and generate the JSON file specifying repositories
       mkdir -p ~/work-gh/mrva/gh-mrva
       cat > ~/work-gh/mrva/gh-mrva/gh-mrva-selection.json <<eof
       {
           "mirva-list": [
               "Serial-Studio/Serial-Studio",
               "UEFITool/UEFITool",
               "aircrack-ng/aircrack-ng",
               "bulk-builder/bulk-builder",
               "tesseract/tesseract"
           ]
       }
       eof

       #*  Create and submit the first query (FlatBuffersFunc.ql)
       # Generate a sample CodeQL query for functions of interest
       cat > ~/work-gh/mrva/gh-mrva/FlatBuffersFunc.ql <<eof
       /**
        ,* @name pickfun
        ,* @description Pick function from FlatBuffers
        ,* @kind problem
        ,* @id cpp-flatbuffer-func
        ,* @problem.severity warning
        ,*/

       import cpp

       from Function f
       where
         f.getName() = "MakeBinaryRegion" or
         f.getName() = "microprotocols_add"
       select f, "definition of MakeBinaryRegion"
       eof

       # Submit the MRVA job with the first query
       cd ~/work-gh/mrva/gh-mrva/
       gh-mrva submit --language cpp --session mirva-session-1172 \
                 --list mirva-list                                \
                 --query ~/work-gh/mrva/gh-mrva/FlatBuffersFunc.ql

       #*  Check status and download results for the first session
       # Check the status of the submitted session
       gh-mrva status --session mirva-session-1172

       # Download SARIF files and databases if there are results.  For the current
       # query / database combination there are zero result hence no downloads
       cd ~/work-gh/mrva/gh-mrva/
       gh-mrva download --session mirva-session-1172   \
               --download-dbs                          \
               --output-dir mirva-session-1172

       #*  Next, run a query with results

       #**  Set up QLPack for the next query
       # Create a qlpack.yml file required for the next query
       cat > ~/work-gh/mrva/gh-mrva/qlpack.yml <<eof
       library: false
       name: codeql-dataflow-ii-cpp
       version: 0.0.1
       dependencies:
         codeql/cpp-all: 0.5.3
       eof

       #**  Create and submit the second query (Fprintf.ql)
       # Generate a CodeQL query to find calls to fprintf
       cat > ~/work-gh/mrva/gh-mrva/Fprintf.ql <<eof
       /**
        ,* @name findPrintf
        ,* @description Find calls to plain fprintf
        ,* @kind problem
        ,* @id cpp-fprintf-call
        ,* @problem.severity warning
        ,*/

       import cpp

       from FunctionCall fc
       where
         fc.getTarget().getName() = "fprintf"
       select fc, "call of fprintf"
       eof

       # Submit a new MRVA job with the second query
       cd ~/work-gh/mrva/gh-mrva/
       gh-mrva submit                                      \
               --language cpp --session mirva-session-1861 \
               --list mirva-list                           \
               --query ~/work-gh/mrva/gh-mrva/Fprintf.ql

       #*  Check status and download results for the second session
       # Check the status of the second session
       gh-mrva status --session mirva-session-1861

       # Download SARIF files and databases for the second query
       cd ~/work-gh/mrva/gh-mrva/
       gh-mrva download --session mirva-session-1861   \
               --download-dbs                          \
               --output-dir mirva-session-1861
     #+END_SRC
** Send request via gui, using vs code
   The following sequence works when run from a local vs code with the custom
   codeql plugin.

   1. =ql tab > variant analysis repositories > {}=, put this into
      =databases.json=
      #+begin_src javascript
        {
            "version": 1,
            "databases": {
                "variantAnalysis": {
                    "repositoryLists": [
                        {
                            "name": "mirva-list",
                            "repositories": [
                                "Serial-Studio/Serial-Studio",
                                "UEFITool/UEFITool",
                                "aircrack-ng/aircrack-ng",
                                "bulk-builder/bulk-builder",
                                "tesseract/tesseract"
                            ]
                        }
                    ],
                    "owners": [],
                    "repositories": []
                }
            },
            "selected": {
                "kind": "variantAnalysisUserDefinedList",
                "listName": "mirva-list"
            }
        }
      #+end_src
      #+BEGIN_SRC sh 
        {
            "version": 1,
            "databases": {
                "variantAnalysis": {
                    "repositoryLists": [
                        {
                            "name": "mrva-list",
                            "repositories": [
                                "Serial-Studio/Serial-Studio",
                                "UEFITool/UEFITool",
                                "aircrack-ng/aircrack-ng",
                                "bulk-builder/bulk-builder",
                                "tesseract/tesseract"
                            ]
                        }
                    ],
                    "owners": [],
                    "repositories": []
                }
            },
            "selected": {
                "kind": "variantAnalysisUserDefinedList",
                "listName": "mirva-list"
            }
        }

      #+END_SRC

   2. XX: bug:
      #+BEGIN_SRC text
        CLI command succeeded.
        Submitting variant analysis
        Base URL: http://github.com


        locally,
            cd ~/work-gh/mrva/vscode-codeql/
            code .

        In the extension,
            const baseUrl = getOctokitBaseUrl();
            void extLogger.log(`Base URL: ${baseUrl}`);
            //XX: Base URL: http://github.com
            // should be container

        In the container, 
            coder@3209a5200724:~/.local/share/code-server/User$ cat settings.json 
            {
                "codeQL.runningQueries.numberOfThreads": 2,
                "codeQL.cli.executablePath": "/opt/codeql/codeql"
            }

        log output

            Fetch request URL: http://github.com/repositories/0/code-scanning/codeql/variant-analyses
            Response status: 404
            Error: Error: Error submitting variant analysis: Not Found
            Error submitting variant analysis: Error submitting variant analysis: Not Found
            Error submitting variant analysis: Not Found (codeQL.runVariantAnalysisContextEditor)
            Error: Error submitting variant analysis: Not Found
                at submitVariantAnalysis (/home/coder/.local/share/code-server/extensions/github.vscode-codeql-1.13.2-dev.2024.12.10.23.51.57/out/extension.js:117980:13)
                at processTicksAndRejections (node:internal/process/task_queues:95:5)
                at _VariantAnalysisManager.runVariantAnalysis (/home/coder/.local/share/code-server/extensions/github.vscode-codeql-1.13.2-dev.2024.12.10.23.51.57/out/extension.js:119840:33)
                at withProgress.title (/home/coder/.local/share/code-server/extensions/github.vscode-codeql-1.13.2-dev.2024.12.10.23.51.57/out/extension.js:119758:9)
            CodeQL extension version: 1.13.2-dev.2024.12.10.23.51.57 
            CodeQL CLI version: 2.20.0 
            Platform: linux arm64
            CodeQL extension version: 1.13.2-dev.2024.12.10.23.51.57 
            CodeQL CLI version: 2.20.0 
            Platform: linux arm64
            Cleaning up query history directories. Removing old entries.
              /home/coder/.local/share/code-server/User/globalStorage/github.vscode-codeql/queries/simple.ql-sUATHR8td5IXoWzPSpoC6 is not older than 2592000 seconds. Keeping.
            Scrubbed 0 old queries.


        need to set url in the extension: source location
             from 
                const baseUrl = getOctokitBaseUrl();
             to ?

        need to set url in the extension: correct url
             look in gh-mrva log

             strace gives logs of the form
             [pid  1509] connect(3, {sa_family=AF_INET, sin_port=htons(8080), sin_addr=inet_addr("127.0.0.1")}, 16) = -1 EINPROGRESS (Operation now in progress)

             err =
             client.Get(fmt.Sprintf("http://localhost:8080/repos/%s/code-scanning/codeql/variant-analyses/%d",
             controller, runId), &response)

             tcpdump output, submit request
                     22:13:24.627138 lo    In  IP localhost.40950 > localhost.8080: Flags [P.], seq 1:4097, ack 1, win 260, options [nop,nop,TS val 3990821087 ecr 3990821087], length 4096: HTTP: POST /repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses HTTP/1.1

             curl version
                curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses

             tcpdump output, status request
                     22:17:01.100022 lo    In  IP localhost.50836 > localhost.8080: Flags [P.], seq 1:276, ack 1, win 260, options [nop,nop,TS val 3991037557 ecr 3991037557], length 275: HTTP: GET /repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 HTTP/1.1

             curl version
                curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 

             curl from gh-mrva container
                  docker exec -it mrva-docker-client-ghmrva-1 bash
                  curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
                  {"id":6,...}

             curl from server container
                  docker exec -it server bash
                  curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
                  works.  just update url/port used by vs code

             curl from mrva-docker-code-server-1 container
                  docker exec -it mrva-docker-code-server-1 bash
                  curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
                  no.

        - Found network configuration issue
        - both of these should work
            docker exec -it mrva-docker-client-ghmrva-1 bash
            ]0;root@f9ccf8c7b2da: /root@f9ccf8c7b2da:/# curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
            riant-analyses/6 
            {"id":6,...}

            0:$ docker exec -it mrva-docker-code-server-1 bash
            ]0;coder@3209a5200724: ~coder@3209a5200724:~$ curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
            curl http://localhost:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
            curl: (7) Failed to connect to localhost port 8080 after 0 ms: Couldn't connect to server
            ]0;coder@3209a5200724: ~coder@3209a5200724:~$ 
        - the docker compose entries are

            client-ghmrva:
                # ./containers/ghmrva/Dockerfile
                image: ghcr.io/hohn/client-ghmrva-container:0.1.24 
                network_mode: "service:server" # Share the 'server' network namespace
                environment:
                    - SERVER_URL=http://localhost:8080  # 'localhost' now refers to 'server'

            code-server:
                # ./containers/vscode/Dockerfile
                image: ghcr.io/hohn/code-server-initialized:0.1.24
                ports:
                    - "9080:9080"
                # XX: Include codeql binary in code-server (if it's not there already)
                environment:
                    - PASSWORD=mrva
     
        fix network conf, try again
             curl from mrva-docker-code-server-1 container
                  docker exec -it mrva-docker-code-server-1 bash
                  curl http://server:8080/repos/not-used/mirva-controller/code-scanning/codeql/variant-analyses/6 
                  works.

      #+END_SRC
      - [X] the extension is version: 1.13.2-dev.2024.12.10.23.51.57
      - [X] network config fixed in docker-compose-demo.yml

   3. [ ] update plugin url to use http://server:8080

   4. =ql tab > variant analysis repositories > select mrva-list=

   5. select file =qldemo/simple.ql= and put =Fprintf.ql= parallel to it:
      #+BEGIN_SRC java
        /**
         ,* @name findPrintf
         ,* @description find calls to plain fprintf
         ,* @kind problem
         ,* @id cpp-fprintf-call
         ,* @problem.severity warning
         ,*/

        import cpp

        from FunctionCall fc
        where
          fc.getTarget().getName() = "fprintf"
        select fc, "call of fprintf"
      #+END_SRC

   6. Adjust the qlpack.yml to cpp, from python.
   7. Submit the analysis job. 

* Updating binaries in running container
  To update the binaries in a running container -- mainly during development:
  - server
    #+BEGIN_SRC sh 
      #* Cross-compile locally
      cd ~/work-gh/mrva/mrvaserver
      make msla

      #* check for running containers
      docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Names}}"

      #* Copy the new binary
      cd ~/work-gh/mrva/mrvaserver
      docker cp mrvaserver server:/usr/local/bin/mrvaserver

      #* Restart the binary
      docker exec server pkill mrvaserver

    #+END_SRC

  - agent
    #+BEGIN_SRC sh 
      #* Cross-compile locally
      cd ~/work-gh/mrva/mrvaagent
      make mala

      #* Look for the agent's name in the process table
      docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Names}}"

      #* Copy the new binary
      cd ~/work-gh/mrva/mrvaagent
      docker cp mrvaagent agent:/usr/local/bin/mrvaagent

      #* Restart the binary
      docker exec agent pkill mrvaagent

    #+END_SRC


